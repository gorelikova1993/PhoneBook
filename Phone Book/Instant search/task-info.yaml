type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/SearchAlgorithms.java
  visible: true
  text: |-
    package phonebook;

    import java.util.Collections;
    import java.util.List;

    class SearchAlgorithms {

        private final List<String> directory;
        private final List<String> find;
        private long searchTime;
        private long sortingTime;
        private int matchCounter;
        boolean isTooLong = false;

        SearchAlgorithms(List<String> directory, List<String> find) {
            this.directory = directory;
            this.find = find;
        }

        protected void linearSearch() {

            matchCounter = 0;

            /* Start time in milliseconds */
            long startTime = System.currentTimeMillis();

            /* Search algorithm */
            for (String findValue : find) {
                for (String directoryValue : directory) {
                    if (directoryValue.contains(findValue)) {
                        matchCounter++;
                        break;
                    }
                }
            }

            searchTime = System.currentTimeMillis() - startTime;

        }

        protected void bubbleSort() {

            System.out.println("Start searching (bubble sort + jump search)...");

            long startTime = System.currentTimeMillis();

            for (int i = 0; i < directory.size() - 1; i++) {
                for (int j = 0; j < directory.size() - i - 1; j++) {
                    if (directory.get(j).compareTo(directory.get(j + 1)) > 0) {
                        Collections.swap(directory, j, j + 1);

                        sortingTime = System.currentTimeMillis() - startTime;

                        /* Stops if sorting time takes too long */
                        if (sortingTime > searchTime * 10) {
                            isTooLong = true;
                            return;
                        }
                    }
                }
            }
            sortingTime = System.currentTimeMillis() - startTime;
        }

        protected void jumpSearch(){
            matchCounter = 0;
            long startTime = System.currentTimeMillis();

            for(String findValue : find) {
                if (jumpSearch(directory, findValue) > -1) {
                    matchCounter++;
                };
            }
            searchTime = System.currentTimeMillis() - startTime;
        }

        private int jumpSearch(List<String> directory, String elem) {
            int size = directory.size();
            int start = 0;
            int end = (int)Math.floor(Math.sqrt(size));

            while (directory.get(end).compareTo(elem) < 0) {
                start = end;
                end += (int)Math.floor(Math.sqrt(size));
                if(end > size - 1)
                    end = size;
            }
            for (int i = start; i <= end; i++) {
                if(directory.get(i).contains(elem))
                    return i;
            }
            return -1;
        }


        public void startQuickSortAndBinarySearch() {
            matchCounter = 0;
            System.out.println("Start searching (quick sort + binary search)...");
            long startTime = System.currentTimeMillis();
            quickSort(directory, 0, directory.size() - 1);
            sortingTime = System.currentTimeMillis() - startTime;
               for(String findValue : find) {
                   if (binarySearch(directory, findValue, 0, directory.size() - 1) > -1) {
                       matchCounter++;
                   };
               }
            searchTime = System.currentTimeMillis() - startTime;
        }

        private int binarySearch(List<String> directory, String key, int low, int high) {
            int index = -1;

            while (low <= high) {
                int mid = (low + high) / 2;
                if (directory.get(mid).compareTo(key) < 0) {
                    low = mid + 1;
                } else if (directory.get(mid).compareTo(key) > 0) {
                    high = mid - 1;
                } else if (directory.get(mid).contains(key)) {
                    index = mid;
                    break;
                }
            }
            return index;
        }

        public void quickSort(List<String> directory,int low, int high) {
            if (low >= high)
                return;

            int middle = low + (high - low) / 2;
            String opora = directory.get(middle);

            int i = low, j = high;
            while (i <= j) {
                while (directory.get(i).compareTo(opora) < 0) {
                    i++;
                }

                while (directory.get(j).compareTo(opora) > 0) {
                    j--;
                }

                if (i <= j) {//меняем местами
                   Collections.swap(directory,i,j);
                    i++;
                    j--;
                }
            }

            if (low < j)
                quickSort(directory, low, j);

            if (high > i)
                quickSort(directory, i, high);
        }





        private static String timeConverter(long totalMilliseconds) {

            long minutes = (totalMilliseconds / 1000) / 60;
            long seconds = (totalMilliseconds / 1000) % 60;
            long millis = totalMilliseconds - seconds * 1000;
            return String.format("%2d min. %2d sec. %2d ms.", minutes, seconds, millis);

        }

        protected void output(int type) {
            switch (type) {
                case 1:
                    System.out.printf("Found %d / %d entries. ", matchCounter, find.size());
                    System.out.println("Time taken: " + timeConverter(searchTime) + "\n");
                    break;
                case 2:
                    System.out.printf("Found %d / %d entries. ", matchCounter, find.size());
                    System.out.println("Time taken: " + timeConverter(sortingTime + searchTime));
                    System.out.println("Sorting time: " + timeConverter(sortingTime) +
                            (isTooLong ? "- STOPPED, moved to linear search" : ""));
                    System.out.println("Searching time: " + timeConverter(searchTime) + "\n");
                    break;
                case 3:
                    System.out.printf("Found %d / %d entries. ", matchCounter, find.size());
                    System.out.println("Time taken: " + timeConverter(sortingTime + searchTime));
                    System.out.println("Sorting time: " + timeConverter(sortingTime));
                    System.out.println("Searching time: " + timeConverter(searchTime) + "\n");

            }

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 02 Dec 2021 09:05:00 UTC
record: -1
